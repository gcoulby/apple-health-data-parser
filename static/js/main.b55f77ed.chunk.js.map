{"version":3,"sources":["img/erdf.svg","img/northumbria.svg","img/ryder.svg","App.js","reportWebVitals.js","index.js"],"names":["App","state","recordFields","status","alertLevel","fileContents","records","categories","handleOnDragOver","evt","stopPropagation","preventDefault","dataTransfer","dropEffect","handleOnDrop","files","readBlob","setState","name","handleOnCheck","id","map","c","checked","target","handleDownloadClick","createZipFile","saveData","blob","filename","a","document","createElement","body","appendChild","setAttribute","url","window","URL","createObjectURL","href","download","click","revokeObjectURL","filter","length","zip","JSZip","date","Date","d","toDateString","t","toLocaleTimeString","replace","file","arrayToCsv","generateAsync","type","then","content","stop","size","reader","FileReader","onloadend","readyState","DONE","result","require","xml2json","compact","spaces","JSON","parse","HealthData","Record","r","key","_attributes","push","healthData","slice","readAsBinaryString","array","csvContent","this","join","e","className","rel","src","erdf","alt","northumbria","ryder","onDragOver","onDrop","role","Fragment","onChange","htmlFor","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b55f77ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/erdf.dd68eb2a.svg\";","export default __webpack_public_path__ + \"static/media/northumbria.9f973ad5.svg\";","export default __webpack_public_path__ + \"static/media/ryder.0a9e1d7e.svg\";","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"xml-js/dist/xml-js.js\";\nimport JSZip from \"jszip/dist/jszip.js\";\nimport \"./App.css\";\nimport erdf from \"./img/erdf.svg\";\nimport northumbria from \"./img/northumbria.svg\";\nimport ryder from \"./img/ryder.svg\";\nimport React, { Component } from \"react\";\nclass App extends Component {\n  state = {\n    recordFields: [\n      \"sourceName\",\n      \"sourceVersion\",\n      \"device\",\n      \"type\",\n      \"unit\",\n      \"creationDate\",\n      \"startDate\",\n      \"endDate\",\n      \"value\",\n    ],\n    status: (\n      <span>\n        <strong>No File Loaded.</strong> Drag a file into the box below to begin\n      </span>\n    ),\n    alertLevel: \"secondary\",\n    fileContents: \"\",\n    records: [],\n    categories: [],\n  };\n\n  handleOnDragOver = (evt) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = \"copy\";\n  };\n\n  handleOnDrop = (evt) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    var files = evt.dataTransfer.files;\n    this.readBlob(files[0]);\n    this.setState({\n      status: (\n        <span>\n          Parsing data from <strong>{files[0].name}</strong>.\n        </span>\n      ),\n    });\n    this.setState({ alertLevel: \"info\" });\n  };\n\n  handleOnCheck = (evt, id) => {\n    const categories = this.state.categories.map((c) => {\n      if (c.name === id) c.checked = evt.target.checked;\n      return c;\n    });\n    this.setState({ categories });\n  };\n\n  handleDownloadClick = () => {\n    this.createZipFile();\n  };\n\n  saveData = (blob, filename) => {\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.setAttribute(\"style\", \"display:none\");\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = filename;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  arrayToCsv(array) {\n    let csvContent = this.state.recordFields.join(\",\") + \"\\r\\n\";\n    csvContent += array\n      .map((e) => {\n        let csv =\n          this.state.recordFields\n            .map((r) => {\n              return e[r];\n            })\n            .join(\",\") + \"\\r\\n\";\n        // console.log(csv);\n        // csv = csv.substr(0, csv.length - 1) + \"\\r\\n\";\n        return csv;\n      })\n      .join(\"\\n\");\n    return csvContent;\n  }\n\n  createZipFile = () => {\n    let categories = this.state.categories.filter((c) => c.checked);\n    if (categories.length === 0) {\n      this.setState({\n        status:\n          \"No categories selected. Please select a cateogory before clicking download\",\n      });\n      this.setState({\n        alertLevel: \"danger\",\n      });\n      return;\n    }\n\n    let zip = new JSZip();\n    let date = new Date();\n    let d = date.toDateString();\n    let t = date.toLocaleTimeString().replace(/:/gm, \"_\");\n    categories.map((c) => {\n      zip.file(\n        `${c.name}_${d}-${t}.csv`,\n        this.arrayToCsv(this.state.records[c.name])\n      );\n      return c;\n    });\n    zip.generateAsync({ type: \"blob\" }).then((content) => {\n      this.saveData(content, `health_data_${d}-${t}.zip`);\n    });\n  };\n\n  readBlob = (file) => {\n    let start = 0;\n    let stop = file.size - 1;\n    let reader = new FileReader();\n    reader.onloadend = (evt) => {\n      if (evt.target.readyState === FileReader.DONE) {\n        this.setState({ fileContents: evt.target.result });\n        var convert = require(\"xml-js\");\n        let result = convert.xml2json(evt.target.result, {\n          compact: true,\n          spaces: 4,\n        });\n        const records = this.state.records;\n        const categories = this.state.categories;\n        JSON.parse(result).HealthData.Record.map((r) => {\n          const regex = /HK.*TypeIdentifier/i;\n          let key = r._attributes.type.replace(regex, \"\");\n          if (!(key in this.state.records)) {\n            records[key] = [];\n            categories.push({ name: key, checked: false });\n          }\n          records[key].push(r._attributes);\n          return r;\n        });\n        this.setState({ records: records });\n        this.setState({ categories });\n        this.setState({\n          healthData: JSON.parse(result).HealthData.Record,\n        });\n        this.setState({ status: <strong>Parsing data complete.</strong> });\n        this.setState({ alertLevel: \"success\" });\n      }\n    };\n    var blob = file.slice(start, stop + 1);\n    reader.readAsBinaryString(blob);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"jumbotron\">\n            <div className=\"container\">\n              <div className=\"row mt-5\">\n                <div className=\"col\">\n                  <h1 className=\"display-4\">iOS Health Data Parser</h1>\n                  <p className=\"lead\">\n                    This is application parses the XML data exported from iOS\n                    Health app and creates CSV files for the chosen health\n                    categories.\n                  </p>\n                  <hr className=\"my-4\" />\n                  <p>\n                    This application was developed to support research funded by\n                    Northumbria University and the European Regional Development\n                    Fund’s Intensive Industrial Innovation Programme as part of\n                    doctoral PhD programme. The sponsoring Small to Medium\n                    Enterprise for this programme was Ryder Architecture and it\n                    was delivered through Northumbria University.\n                  </p>\n                  <div className=\"container\">\n                    <div className=\"row my-4\">\n                      <div className=\"col-4\">\n                        <a\n                          target=\"_blank\"\n                          href=\"https://ec.europa.eu/regional_policy/en/funding/erdf/\"\n                          rel=\"noreferrer noopener\"\n                        >\n                          <img\n                            src={erdf}\n                            alt=\"European Regional Development Fund logo\"\n                          />\n                        </a>\n                      </div>\n                      <div className=\"col-4\">\n                        <a\n                          target=\"_blank\"\n                          href=\"https://www.northumbria.ac.uk/\"\n                          rel=\"noreferrer noopener\"\n                        >\n                          <img\n                            src={northumbria}\n                            alt=\"Northumbria University Logo\"\n                          />\n                        </a>\n                      </div>\n                      <div className=\"col-4\">\n                        <a\n                          target=\"_blank\"\n                          href=\"https://ryderarchitecture.com\"\n                          rel=\"noreferrer noopener\"\n                        >\n                          <img src={ryder} alt=\"Ryder Architecture Logo\" />\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                  <hr className=\"my-4\" />\n                  <h5>Data Privacy Statement</h5>\n                  <p>\n                    This app works client-side (processed by your browser) and\n                    no data is collected, stored or managed by this application.\n                    When the Save File(s) button is clicked a file is generated\n                    locally in your browser and will automatically download to\n                    your machine as a compressed archive.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <p\n                className={`alert alert-${this.state.alertLevel}`}\n                id=\"file_name\"\n              >\n                {this.state.status}\n              </p>\n              <div\n                id=\"drop_zone\"\n                onDragOver={(e) => this.handleOnDragOver(e)}\n                onDrop={(e) => this.handleOnDrop(e)}\n              >\n                <p>DROP iOS Health export.xml FILE&nbsp;HERE</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"row mt-4\">\n            <div className=\"col\">\n              <div className=\"alert alert-warning\" role=\"alert\">\n                After the file has been parsed, a list of health categories will\n                be generated below. From this list, select the categories you\n                wish export then press the export button\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-8\">\n              <ul id=\"category\">\n                {this.state.categories.map((c) => (\n                  <React.Fragment key={`${c.name}_fragment`}>\n                    <li key={c.name}>\n                      <div\n                        key={`${c.name}_switch`}\n                        className=\"form-check form-switch\"\n                      >\n                        <input\n                          key={`${c.name}_input`}\n                          className=\"form-check-input\"\n                          type=\"checkbox\"\n                          id={`${c.name}_flexSwitchCheckDefault`}\n                          checked={c.checked}\n                          onChange={(e) => this.handleOnCheck(e, c.name)}\n                        />\n                        <label\n                          key={`${c.name}_label+`}\n                          className=\"form-check-label\"\n                          htmlFor={`${c.name}_flexSwitchCheckDefault`}\n                        >\n                          {c.name}\n                        </label>\n                      </div>\n                    </li>\n                  </React.Fragment>\n                ))}\n              </ul>\n            </div>\n            <div className=\"col-4\">\n              {this.state.categories.length > 0 ? (\n                <div key=\"download_btn\" className=\"d-grid gap-2\">\n                  <button\n                    className=\"btn btn-primary btn-lg\"\n                    type=\"button\"\n                    onClick={() => this.handleDownloadClick()}\n                  >\n                    <i className=\"fa fa-download\"></i>&nbsp;Save File(s)\n                  </button>\n                </div>\n              ) : (\n                React.Fragment\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./styles/css-compiled/main.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}